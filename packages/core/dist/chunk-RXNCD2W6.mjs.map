{"version":3,"sources":["../src/app-init/dmno-globals-injector.ts"],"names":[],"mappings":"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","sourcesContent":["import type { InjectedDmnoEnv, InjectedDmnoEnvItem } from '../config-engine/config-engine';\n\nconst processExists = !!globalThis.process;\nlet originalProcessEnv: Record<string, string> = {};\ntry {\n  originalProcessEnv = structuredClone(globalThis.process.env) as any;\n} catch (err) {\n  console.log('error cloning process.env', err);\n}\n\nexport function injectDmnoGlobals(\n  opts?: {\n    injectedConfig?: InjectedDmnoEnv,\n    trackingObject?: Record<string, boolean>,\n    onItemAccess?: (item: InjectedDmnoEnvItem) => void;\n  },\n) {\n  const sensitiveValueLookup: Record<string, { value: string, masked: string }> = {};\n  const publicDynamicKeys: Array<string> = [];\n  const sensitiveKeys: Array<string> = [];\n\n  // if we've already injected the globals and we didnt have any options passed in, we can bail\n  if (!opts && (globalThis as any).DMNO_CONFIG) {\n    return {};\n  }\n\n  // otherwise we'll inject the DMNO_CONFIG globals\n  // either pulling from a passed in config or from process.env.DMNO_INJECTED_ENV\n\n  let injectedDmnoEnv = opts?.injectedConfig;\n\n  if (!injectedDmnoEnv && (globalThis as any)._DMNO_INJECTED_ENV) {\n    injectedDmnoEnv = (globalThis as any)._DMNO_INJECTED_ENV;\n  } else if (!injectedDmnoEnv && globalThis.process.env.DMNO_INJECTED_ENV) {\n    injectedDmnoEnv = JSON.parse(globalThis.process.env.DMNO_INJECTED_ENV);\n  }\n  if (!injectedDmnoEnv) {\n    console.log((globalThis as any)._DMNO_INJECTED_ENV);\n    console.log(globalThis.process.env.DMNO_INJECTED_ENV);\n    throw new Error('Unable to find `process.env.DMNO_INJECTED_ENV` - run this command via `dmno run` - see https://dmno.dev/docs/reference/cli/run for more info');\n  }\n\n  // feed loaded config values back into process.env (as strings)\n  if (processExists) {\n    // TODO: maybe we dont want to re-assign the object, but just modify keys instead?\n    globalThis.process.env = { ...originalProcessEnv };\n  }\n\n  const rawConfigObj: Record<string, string> = {};\n  const rawPublicConfigObj: Record<string, string> = {};\n\n  const staticReplacements: Record<string, string> = {};\n\n  for (const itemKey in injectedDmnoEnv) {\n    const injectedItem = injectedDmnoEnv[itemKey];\n    const val = injectedItem.value;\n\n    // re-inject into process.env\n    if (processExists) {\n      if (val === undefined || val === null) {\n        globalThis.process.env[itemKey] = '';\n      } else {\n        globalThis.process.env[itemKey] = val.toString();\n      }\n    }\n\n    if (!injectedItem.sensitive) {\n      rawPublicConfigObj[itemKey] = '*';\n      rawConfigObj[itemKey] = '*';\n    } else {\n      sensitiveKeys.push(itemKey);\n      rawConfigObj[itemKey] = '*';\n      if (val) {\n        sensitiveValueLookup[itemKey] = {\n          value: injectedItem.value.toString(),\n          masked: '****', // TODO:\n        };\n      }\n    }\n\n    if (!injectedItem.sensitive && injectedItem.dynamic) {\n      publicDynamicKeys.push(itemKey);\n    }\n\n\n    if (injectedItem.sensitive) {\n      // if it's sensitive and static, we'll inject only into DMNO_CONFIG\n      if (!injectedItem.dynamic) {\n        staticReplacements[`DMNO_CONFIG.${itemKey}`] = JSON.stringify(injectedItem.value);\n      }\n    } else {\n      // if public and static, we'll inject into vite's rewrites\n      if (!injectedItem.dynamic) {\n        // add rollup rewrite/define for non-sensitive items\n        staticReplacements[`DMNO_PUBLIC_CONFIG.${itemKey}`] = JSON.stringify(injectedItem.value);\n        staticReplacements[`DMNO_CONFIG.${itemKey}`] = JSON.stringify(injectedItem.value);\n      }\n    }\n  }\n\n  // We attach some stuff to the locally running process / globalThis\n\n  (globalThis as any).DMNO_CONFIG = new Proxy(rawConfigObj, {\n    get(o, key) {\n      const keyStr = key.toString();\n      if (opts?.trackingObject) opts.trackingObject[keyStr] = true;\n      // console.log('get DMNO_CONFIG - ', key);\n      if (key in injectedDmnoEnv) {\n        if (opts?.onItemAccess) opts.onItemAccess(injectedDmnoEnv[keyStr]);\n        return injectedDmnoEnv[keyStr].value;\n      }\n      throw new Error(`❌ ${keyStr} is not a config item (1)`);\n    },\n  });\n\n  // attach the same proxy object so we can throw nice errors\n  (globalThis as any).DMNO_PUBLIC_CONFIG = new Proxy(rawPublicConfigObj, {\n    get(o, key) {\n      const keyStr = key.toString();\n      if (opts?.trackingObject) opts.trackingObject[keyStr] = true;\n      // console.log('get DMNO_PUBLIC_CONFIG - ', keyStr);\n      if (injectedDmnoEnv[keyStr]?.sensitive) {\n        throw new Error(`❌ ${keyStr} is not a public config item! Use \\`DMNO_CONFIG.${keyStr}\\` instead`);\n      }\n      if (key in injectedDmnoEnv) {\n        if (opts?.onItemAccess) opts.onItemAccess(injectedDmnoEnv[keyStr]);\n        return injectedDmnoEnv[keyStr].value;\n      }\n      throw new Error(`❌ ${keyStr} is not a config item (2)`);\n    },\n  });\n\n  (globalThis as any)._DMNO_PUBLIC_DYNAMIC_KEYS = publicDynamicKeys;\n  (globalThis as any)._DMNO_SENSITIVE_KEYS = sensitiveKeys;\n  return { injectedDmnoEnv, staticReplacements };\n}\n"]}