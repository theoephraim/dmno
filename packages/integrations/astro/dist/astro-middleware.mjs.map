{"version":3,"sources":["../src/astro-middleware.ts"],"names":[],"mappings":";;;;;AAAA,OAAO;AAGP,IAAM,oBAAqB,WAAmB;AAC9C,IAAM,uBAA+C,CAAC;AACtD,WAAW,WAAW,mBAAmB;AACvC,QAAM,MAAO,WAAmB,YAAY,OAAO;AACnD,MAAI;AAAK,yBAAqB,OAAO,IAAI,IAAI,SAAS;AACxD;AAGO,IAAM,YAA+B,8BAAO,SAAS,SAAS;AAGnE,QAAM,WAAW,MAAM,KAAK;AAG5B,QAAM,WAAW,MAAM,SAAS,MAAM,EAAE,KAAK;AAG7C,aAAW,WAAW,sBAAsB;AAC1C,QAAI,SAAS,SAAS,qBAAqB,OAAO,CAAC,GAAG;AAEpD,YAAM,IAAI,MAAM,0CAAmC,OAAO,EAAE;AAAA,IAC9D;AAAA,EACF;AACF,GAf4C","sourcesContent":["import 'dmno/inject';\nimport { MiddlewareHandler } from 'astro';\n\nconst sensitiveItemKeys = (globalThis as any)._DMNO_SENSITIVE_KEYS as Array<string>;\nconst sensitiveValueLookup: Record<string, string> = {};\nfor (const itemKey of sensitiveItemKeys) {\n  const val = (globalThis as any).DMNO_CONFIG[itemKey];\n  if (val) sensitiveValueLookup[itemKey] = val.toString();\n}\n\n\nexport const onRequest: MiddlewareHandler = async (context, next) => {\n  // console.log(`custom astro middleware executed - ${context.url}`);\n\n  const response = await next();\n\n  // TODO: binary file types / images / etc dont need to be checked\n  const bodyText = await response.clone().text();\n\n  // scan for leaked secrets!\n  for (const itemKey in sensitiveValueLookup) {\n    if (bodyText.includes(sensitiveValueLookup[itemKey])) {\n      // TODO: better error details to help user _find_ the problem\n      throw new Error(`ðŸš¨ DETECTED LEAKED CONFIG ITEM! ${itemKey}`);\n    }\n  }\n};\n"]}